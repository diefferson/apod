// Mocks generated by Mockito 5.4.4 from annotations
// in apod/test/src/mocks/domain_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:apod/src/domain/exception/apod_exception.dart' as _i4;
import 'package:apod/src/domain/exception/error_handler.dart' as _i7;
import 'package:apod/src/domain/model/apod_model.dart' as _i11;
import 'package:apod/src/domain/services/error_service.dart' as _i8;
import 'package:apod/src/domain/services/loading_service.dart' as _i9;
import 'package:apod/src/domain/use_cases/get_apod_items_use_case.dart' as _i10;
import 'package:apod/src/domain/use_cases/use_case.dart' as _i5;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApodException_2 extends _i1.SmartFake implements _i4.ApodException {
  _FakeApodException_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUseCase<T, Params> extends _i1.Mock
    implements _i5.UseCase<T, Params> {
  @override
  _i2.Future<T> run(Params? params) => (super.noSuchMethod(
        Invocation.method(
          #run,
          [params],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #run,
                  [params],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #run,
                [params],
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #run,
                  [params],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #run,
                [params],
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<_i3.Either<_i4.ApodException, T>> execute({
    Params? params,
    bool? withLoading = false,
    bool? withError = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #params: params,
            #withLoading: withLoading,
            #withError: withError,
          },
        ),
        returnValue: _i2.Future<_i3.Either<_i4.ApodException, T>>.value(
            _FakeEither_1<_i4.ApodException, T>(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #params: params,
              #withLoading: withLoading,
              #withError: withError,
            },
          ),
        )),
        returnValueForMissingStub:
            _i2.Future<_i3.Either<_i4.ApodException, T>>.value(
                _FakeEither_1<_i4.ApodException, T>(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #params: params,
              #withLoading: withLoading,
              #withError: withError,
            },
          ),
        )),
      ) as _i2.Future<_i3.Either<_i4.ApodException, T>>);

  @override
  _i4.ApodException handleError(_i4.ApodException? exception) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [exception],
        ),
        returnValue: _FakeApodException_2(
          this,
          Invocation.method(
            #handleError,
            [exception],
          ),
        ),
        returnValueForMissingStub: _FakeApodException_2(
          this,
          Invocation.method(
            #handleError,
            [exception],
          ),
        ),
      ) as _i4.ApodException);
}

/// A class which mocks [ErrorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorHandler extends _i1.Mock implements _i7.ErrorHandler {
  @override
  _i4.ApodException handle(dynamic exception) => (super.noSuchMethod(
        Invocation.method(
          #handle,
          [exception],
        ),
        returnValue: _FakeApodException_2(
          this,
          Invocation.method(
            #handle,
            [exception],
          ),
        ),
        returnValueForMissingStub: _FakeApodException_2(
          this,
          Invocation.method(
            #handle,
            [exception],
          ),
        ),
      ) as _i4.ApodException);
}

/// A class which mocks [ErrorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorService extends _i1.Mock implements _i8.ErrorService {
  @override
  _i2.Stream<_i4.ApodException?> get error => (super.noSuchMethod(
        Invocation.getter(#error),
        returnValue: _i2.Stream<_i4.ApodException?>.empty(),
        returnValueForMissingStub: _i2.Stream<_i4.ApodException?>.empty(),
      ) as _i2.Stream<_i4.ApodException?>);

  @override
  void addError(_i4.ApodException? error) => super.noSuchMethod(
        Invocation.method(
          #addError,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dismissError() => super.noSuchMethod(
        Invocation.method(
          #dismissError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LoadingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadingService extends _i1.Mock implements _i9.LoadingService {
  @override
  _i2.Stream<bool> get loading => (super.noSuchMethod(
        Invocation.getter(#loading),
        returnValue: _i2.Stream<bool>.empty(),
        returnValueForMissingStub: _i2.Stream<bool>.empty(),
      ) as _i2.Stream<bool>);

  @override
  void startLoading() => super.noSuchMethod(
        Invocation.method(
          #startLoading,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopLoading() => super.noSuchMethod(
        Invocation.method(
          #stopLoading,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetApodItemsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetApodItemsUseCase extends _i1.Mock
    implements _i10.GetApodItemsUseCase {
  @override
  _i2.Future<List<_i11.ApodModel>> run(
          _i10.GetApodItemsUseCaseParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #run,
          [params],
        ),
        returnValue: _i2.Future<List<_i11.ApodModel>>.value(<_i11.ApodModel>[]),
        returnValueForMissingStub:
            _i2.Future<List<_i11.ApodModel>>.value(<_i11.ApodModel>[]),
      ) as _i2.Future<List<_i11.ApodModel>>);

  @override
  _i2.Future<_i3.Either<_i4.ApodException, List<_i11.ApodModel>>> execute({
    _i10.GetApodItemsUseCaseParams? params,
    bool? withLoading = false,
    bool? withError = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #params: params,
            #withLoading: withLoading,
            #withError: withError,
          },
        ),
        returnValue: _i2
            .Future<_i3.Either<_i4.ApodException, List<_i11.ApodModel>>>.value(
            _FakeEither_1<_i4.ApodException, List<_i11.ApodModel>>(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #params: params,
              #withLoading: withLoading,
              #withError: withError,
            },
          ),
        )),
        returnValueForMissingStub: _i2
            .Future<_i3.Either<_i4.ApodException, List<_i11.ApodModel>>>.value(
            _FakeEither_1<_i4.ApodException, List<_i11.ApodModel>>(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #params: params,
              #withLoading: withLoading,
              #withError: withError,
            },
          ),
        )),
      ) as _i2.Future<_i3.Either<_i4.ApodException, List<_i11.ApodModel>>>);

  @override
  _i4.ApodException handleError(_i4.ApodException? exception) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [exception],
        ),
        returnValue: _FakeApodException_2(
          this,
          Invocation.method(
            #handleError,
            [exception],
          ),
        ),
        returnValueForMissingStub: _FakeApodException_2(
          this,
          Invocation.method(
            #handleError,
            [exception],
          ),
        ),
      ) as _i4.ApodException);
}
