// Mocks generated by Mockito 5.4.4 from annotations
// in apod/test/src/mocks/data_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:apod/src/data/network/app_auth_interceptor.dart' as _i3;
import 'package:apod/src/data/network/app_cache_interceptor.dart' as _i6;
import 'package:dio/dio.dart' as _i5;
import 'package:dio_cache_interceptor/dio_cache_interceptor.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCacheOptions_0 extends _i1.SmartFake implements _i2.CacheOptions {
  _FakeCacheOptions_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppAuthInterceptor].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppAuthInterceptor extends _i1.Mock
    implements _i3.AppAuthInterceptor {
  @override
  _i4.Future<dynamic> onRequest(
    _i5.RequestOptions? options,
    _i5.RequestInterceptorHandler? handler,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #onRequest,
          [
            options,
            handler,
          ],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  void onResponse(
    _i5.Response<dynamic>? response,
    _i5.ResponseInterceptorHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onResponse,
          [
            response,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    _i5.DioException? err,
    _i5.ErrorInterceptorHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            err,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AppCacheInterceptor].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppCacheInterceptor extends _i1.Mock
    implements _i6.AppCacheInterceptor {
  @override
  _i2.CacheOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeCacheOptions_0(
          this,
          Invocation.getter(#options),
        ),
        returnValueForMissingStub: _FakeCacheOptions_0(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.CacheOptions);

  @override
  void onResponse(
    _i5.Response<dynamic>? response,
    _i5.ResponseInterceptorHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onResponse,
          [
            response,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRequest(
    _i5.RequestOptions? options,
    _i5.RequestInterceptorHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onRequest,
          [
            options,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    _i5.DioException? err,
    _i5.ErrorInterceptorHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            err,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
